To create a Docker container for your HTML file that can run in Google Cloud Platform (GCP), you need to follow these steps:

1. **Create a Web Server File**: Since HTML needs a web server to be served, you'll need to create a simple web server file. For example, using Node.js with Express.

2. **Package Your Application**: Create a `package.json` file if you are using Node.js, and ensure all dependencies are listed.

3. **Create a Dockerfile**: This file contains the instructions to build the Docker image.

4. **Build the Docker Image**: Use the Docker CLI to build an image from your Dockerfile.

5. **Push the Image to a Registry**: You can use Google Container Registry (GCR) to store your Docker image.

6. **Deploy to Google Cloud**: Use Google Cloud Run or another GCP service to deploy your container.

Let's break down these steps:

### Step 1: Create a Web Server File (if using Node.js)

Here's an example of a simple Node.js server using Express to serve your HTML file:

```javascript
// server.js
const express = require('express');
const app = express();
const PORT = process.env.PORT || 8080;

app.use(express.static('public')); // 'public' is the directory where your files will be served

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
```

### Step 2: Package Your Application

Create a `package.json` file for your Node.js application:

```json
{
  "name": "guessing-game",
  "version": "1.0.0",
  "description": "A simple guessing game",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1"
  }
}
```

### Step 3: Create a Dockerfile

Here's an example of a Dockerfile for the Node.js application:

```dockerfile
# Use the official Node.js 16 image.
# https://hub.docker.com/_/node
FROM node:16-slim

# Create and change to the app directory.
WORKDIR /usr/src/app

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure both package.json AND package-lock.json are copied.
# Copying this separately prevents re-running npm install on every code change.
COPY package*.json ./

# Install production dependencies.
RUN npm install --production

# Copy local code to the container image.
COPY . .

# Set the environment variable to serve the application on the correct port.
ENV PORT 8080

# Run the web service on container startup.
CMD [ "npm", "start" ]
```

### Step 4: Build the Docker Image

Run the following command in the same directory as your Dockerfile:

```bash
docker build -t guessing-game .
```

### Step 5: Push the Image to Google Container Registry

Tag your image with the registry name and push it:

```bash
docker tag guessing-game gcr.io/your-project-id/guessing-game
docker push gcr.io/your-project-id/guessing-game
```

Replace `your-project-id` with your actual GCP project ID.

### Step 6: Deploy to Google Cloud

You can now deploy your container to Google Cloud Run by running:

```bash
gcloud run deploy --image gcr.io/your-project-id/guessing-game --platform managed
```

Please ensure you have the `gcloud` CLI installed and configured with your GCP project.

**Note**: The provided steps assume you have a basic understanding of Docker, Node.js, and Google Cloud Platform. You will also need to have a GCP account and the `gcloud` CLI set up on your machine to complete these steps. The example provided uses Node.js, but you can use any other web server technology you're comfortable with, like Nginx or Apache, by adjusting the Dockerfile and server setup accordingly.
